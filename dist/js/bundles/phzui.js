var pageComponent=webpackJsonppageComponent([27],{280:function(e,t,o){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var i=o(1),l=n(i),p=o(2),c=n(p);o(4),o(5),o(6),o(7),o(8),o(9),o(10),o(11),o(12),o(13),o(14),o(15);var u=o(281),h=n(u),d=function(e){function t(){return r(this,t),a(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return s(t,e),t}(l.default);c.default.register(d,h.default),t.default=d},281:function(e,t,o){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.templates=t.phzui=void 0;var i,l=o(1),p=n(l),c=o(2),u=n(c);goog.loadModule(function(e){function t(e,t,n){var i=function(){r("h6");var t=e.page.description;"function"==typeof t?t():null!=t&&s(t),a("h6"),r("article",null,null,"id","1"),r("h2"),s("Portlet"),a("h2"),r("p"),s("Web apps in Liferay Portal are called portlets. Like many web apps, portlets process requests and generate responses. In the response, the portlet returns content (e.g. HTML, XHTML) for display in browsers. One key difference is that portlets run in a portion of the web page, it means you only need to worry about the application because any interface component is handled by other components. Another difference is that portlets run only in a portal server, like the one in Liferay Portal. Portlets can therefore use the portal’s existing support for user management, authentication, permissions, page management, and more. This frees you to focus on developing the portlet’s core functionality. In many ways, writing your application as a portlet is easier than writing a standalone application."),a("p"),r("p"),r("img",null,null,"src","/images/portlet.png"),a("img"),a("p"),r("p"),s("One page can contain several different portlets, for example: a page in a community site could have a calendar portlet for community events, an announcements portlet for important announcements, and a bookmarks portlet for links of interest to the community. And because the portal controls page layout, you can reposition and resize one or more portlets on a page without altering any portlet code. Doing all this in other types of web apps would require manual re-coding."),a("p"),r("p"),s("Since the portlets are components, in other words, they are independent functional objects, it means that will have a lifecycle:"),a("p"),r("ul"),r("li"),r("strong"),s("Activate:"),a("strong"),s(" when a component is being started."),a("li"),r("li"),r("strong"),s("Active:"),a("strong"),s(" the component is started and available."),a("li"),r("li"),r("strong"),s("Deactivate:"),a("strong"),s(" the component is being stopped."),a("li"),a("ul"),r("p"),r("img",null,null,"src","/images/portlet-lc.png"),a("img"),a("p"),r("p"),s("Portlets handle requests in multiple phases. This makes portlets much more flexible than servlets. Each portlet phase executes different operations:"),a("p"),r("ul"),r("li"),r("strong"),s("AInit:"),a("strong"),s(" It is the first phase a potlet goes through when it’s deployed. During this phase, portlets typically initialize any backend resources or perform any one-time activities that they need."),a("li"),r("li"),r("strong"),s("ARender:"),a("strong"),s(" Generates the portlet’s contents based on the portlet’s current state. When this phase runs on one portlet, it also runs on all other portlets on the page. The Render phase runs when any portlets on the page complete the Action or Event phases."),a("li"),r("li"),r("strong"),s("AAction:"),a("strong"),s(" In response to a user action, performs some operation that changes the portlet’s state. The Action phase can also trigger events that are processed by the Event phase. Following the Action phase and optional Event phase, the Render phase then regenerates the portlet’s contents."),a("li"),r("li"),r("strong"),s("AEvent:"),a("strong"),s(" Processes events triggered in the Action phase. Events are used for IPC. Once the portlet processes all events, the portal calls the Render phase on all portlets on the page."),a("li"),r("li"),r("strong"),s("AResource-serving:"),a("strong"),s(" Serves a resource independent from the rest of the lifecycle. This lets a portlet serve dynamic content without running the Render phase on all portlets on a page. The Resource-serving phase handles AJAX requests."),a("li"),r("li"),r("strong"),s("ADestroy:"),a("strong"),s(" This phase is called by the portlet container when the portlet is uninstalled. This phase is designed to allow the portlet to release any resources it needs to and to save its state if necessary."),a("li"),a("ul"),r("p"),s("The render phase can be further subdivided into different modes, which gives users an easy way to access a particular page in a portlet. Modes distinguish the portlet’s current function:"),a("p"),r("ul"),r("li"),r("strong"),s("View mode:"),a("strong"),s(" The portlet’s standard mode. Use this mode to access the portlet’s main functionality."),a("li"),r("li"),r("strong"),s("Edit mode:"),a("strong"),s(" The portlet’s configuration mode. Use this mode to configure a custom view or behavior. For example, the Edit mode of a weather portlet could let you choose a location to retrieve weather data from."),a("li"),r("li"),r("strong"),s("Help mode:"),a("strong"),s(" A mode that displays the portlet’s help information."),a("li"),a("ul"),r("p"),r("img",null,null,"src","/images/portlet-render.png"),a("img"),a("p"),r("p"),s("Most modern applications use View Mode only. Portlet window states control the amount of space a portlet takes up on a page. Window states mimic window behavior in a traditional desktop environment:"),a("p"),r("ul"),r("li"),r("strong"),s("Normal:"),a("strong"),s(" The portlet can be on a page that contains other portlets. This is the default window state."),a("li"),r("li"),r("strong"),s("Maximized:"),a("strong"),s(" The portlet takes up an entire page."),a("li"),r("li"),r("strong"),s("Minimized:"),a("strong"),s(" Only the portlet’s title bar shows."),a("li"),a("ul"),r("p"),s("Compared to servlets, portlets also have some other key differences. Since portlets only render a portion of a page, tags like <html>, <head>, and <body> aren’t allowed. And because you don’t know the portlet’s page ahead of time, you can’t create portlet URLs directly. Instead, the portlet API gives you methods to create portlet URLs programmatically. Also, because portlets don’t have direct access to the "),r("strong"),s("javax.servlet.ServletRequest"),a("strong"),s(", they can’t read query parameters directly from a URL. Portlets instead access a "),r("strong"),s("javax.portlet.PortletRequest"),a("strong"),s(" object. The portlet specification only provides a mechanism for a portlet to read its own URL parameters or those declared as public render parameters. Liferay Portal does, however, provide utility methods that can access the "),r("strong"),s("ServletRequest"),a("strong"),s(" and query parameters. Portlets also have a portlet filter available for each phase in the portlet lifecycle. Portlet filters are similar to servlet filters in that they allow request and response modification on the fly."),a("p"),r("p"),s("More details, access "),r("a",null,null,"href","https://dev.liferay.com/develop/tutorials/-/knowledge_base/7-0/portlets"),s("dev.liferay"),a("a"),s("."),a("p"),a("article"),r("input",null,null,"type","hidden","value",e.page.title),a("input"),r("input",null,null,"type","hidden","value",e.site.title),a("input")};l(o.$$assignDefaults({content:i},e),null,n)}goog.module("phzui.incrementaldom");var o=goog.require("soy");goog.require("soydata");goog.require("goog.asserts"),goog.require("soy.asserts"),goog.require("goog.i18n.bidi"),goog.require("goog.string");var n=goog.require("incrementaldom"),r=n.elementOpen,a=n.elementClose,s=(n.elementVoid,n.elementOpenStart,n.elementOpenEnd,n.text),l=(n.attr,u.default.getTemplate("guide.incrementaldom","render"));return e.render=t,goog.DEBUG&&(t.soyTemplateName="phzui.render"),e.render.params=["page","site"],e.render.types={page:"?",site:"?"},e.templates=i=e,e});var h=function(e){function t(){return r(this,t),a(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return s(t,e),t}(p.default);u.default.register(h,i),t.phzui=h,t.templates=i,t.default=i}},[280]);